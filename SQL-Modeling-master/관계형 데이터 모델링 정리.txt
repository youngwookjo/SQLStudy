데이터 모델링이란

	업무파악(데이터 설계) -> 개념적 데이터 모델링 -> 논리적 데이터 모델링 -> 물리적 데이터 모델링을

데이터 설계


	데이터 모델링을 한다는 것은

	정보를 발견하고 다른사람들에게 표현할 수 있어야 하고

	연관된 정보를 그룹핑(grouping)하고 인식한뒤 다른사람들에게 표현할수있어야 하고

	정보그룹사이의 관계를 인식하고 표현할수 있어야 한다

	이러한 도구가 엔티티(Entity) 이다 




개념적 모델링 

	개념적 모델링은 데이터 모델링에 있어서 핵심이라고 볼 수 있다
	
	개념적 데이터 모델링을 잘하지 못한다면 을 잘하지 못한다면 논리적 물리적 데이터 모델링을 잘해낼수 없다 <- 제일 중요하다 ★★

	관계형 데이터 모델링(RDB)는 내포관계를 허용하지 않는다

	그렇기 때문에 주제에 따라 표를 나누어야 하며 주제에 따라 데이터를 grouping 하여야 한다


		
개념적 모델링 용어정리


	Entity는 디렉토리 로 비유할수 있으며 파일만 담을수 있고 자식 디렉토리는 담을수 없는 제한적인(평면적인) 디렉토리이다

	Attribute는 파일이라고 비유할수 있다

	Identifier 식별자는 

		테이블에 놓여진 정보를 구별하는 것으로써

		user_id 와 같이 중복되지 않는 키를 primary key

		email , national_id 대체키 alternate key라고 부른다 이러한 대체키는 성능향상에 도움이 된다

		그리고 이러한 키 전체를 후보키 candidate key 라고 한다

		직원번호와 부서번호같이 중복되어 식별할수 없는 키를 중복키(composite key) 라고한다

			
			
	Cardinality 기수

		1:1 로 이어져있거나 1:N N : M 으로 이어질수 있다

	Optionality 옵션

		저자와 댓글로 빗대어서 설명할 경우

		저자는 꼭 댓글이 필요하지 않지만  (O 로 표시)

		댓글을 꼭 저자가 있어야 한다   (l 로 표시)






논리적 데이터 모델링


	Entity -> table

	Attribute -> Column

	Relation -> PK, FK  (Primary key)  (Foreign key)

	논리적 데이터모델링을 처음 만듦에 있어서

	Relation PK와 FK부터 만드는것이 편하다 그 후

	1:1, 1:N, N:M 관계의 데이터 모델을 처리하게 된다

	1:1관계는 누가 기본키를 가질지 결정하여야 하며

	1:N 관계에서는 1에서 PK , N에서 FK 를 가진다

	M:N 관계에서는 옵션과 기수를 정리해주어야 한다 

	
제 1정규화

	topic과 tag의 관계의

	하나의 토픽이 여러가지 태그를 가질수 있다

	하나의 태그는 여러개의 토픽을 가질수 있다

	토픽과 태그는 M N 의 관계에 있다

	tag는 글의 제목에 의존하다

	연결테이블을 만들어줘야한다

	테그와 토픽을 따로 테이블을 만든 뒤 연결테이블을 만들어 연결시켜준다

		
제 2정규화

	중복을 제거함으로써
		
	부분 종속성이 없어야한다


제 3 정규화

	이행적 종속성

	책에 책정보와 저자정보가 topic에 담겨있다고 했을때

	저자정보에 대한것만 따로 테이블을 만든뒤 중복을 제거한다



물리적 데이터 모델링

	물리적 데이터모델링 단계에서 중요한것은 성능이다

	just do it
		데이터가 쌓이고 실행을 해보아야 어디서 느려지고 어디서빨라지는지 병목이 발생하는 지점을 알수있고 해결할 수 있다

	find slow query
		데이터 베이스 제품에 이름을 붙여서 어디서 병목을 발생하는지 찾아 볼 수 있다
		성능을 향상시키기위한 여러가지 방법을 적용해 보아야 한다

	denormalization 
		역정규화 혹독한 대가를 치루고 해내어야한다
		
		다른방법을 찾은후 방법이 없을시 하여야 한다

	index

		읽기 성능은 엄청나게 발전시키지만 
		쓰기기능은 저하된다 
		저장공간을 많이 차지한다

	application 

		캐셔와 같은 방법을 시도한다
		입력에 따른 실행결과를 저장해두었다가 
		동일한 입력이 들어왔을때 저장된결과를 사용한다
		

	그러므로 데이터 베이스 부하를 주지 않는것

	정규화를 하게 되면 표들이 여러가지 쪼개지게 되고 join을 해서 합쳐줘야 하는데

	읽기 성능이 희생되기 때문에 

	여러가지 방법을 해보고 최후의 수단으로 물리적 데이터 모델링을 하는것이다

	
	
역정규화를 하는 방법

	1.컬럼의 역정규화 - 컬럼중복 :JOIN을 줄이기
		테이블 내에 중복을 허용하여 속도를 향상시킨다

	2. 파생 컬럼의 형성으로 계산 작업 줄이기
		group by 처럼 그룹을 데이터를 다읽어와서 숫자를 정의 하는것은 비효율적임으로
		count와 같은 컬럼을 만들어서 원하는 데이터가 몇개인지 보여주는 컬럼을 이용해서 group by를 이용하지 
		않고 값이하나 추가될때마  +1 시켜줌으로써 데이터베이스의 효율을 증진시키는것이다
			
	3. 컬럼을 기준으로 테이블 분리
		한 컬럼에 가진 데이터양이 너무 많을 경우 효율을 위하여 테이블을 여러가지 모양으로 쪼개는 것이다
			
			
	4. 행을 기준으로 테이블 분리
		사용자가 1억명일 경우 author_id가 수만개가 되기때문에 데이터를 조회할때 비효율성이 뒤따르기 때문에
		author_id를 통하여 조회할 떄 table_1000 등 
		테이블에 모든 데이터를 가지는 것이 아닌 1000단위씩 테이블로 나누어 관리하는 것이다
			
	5. 관계의 역정규화 - 지름길을 만든다
		컬럼의 역정규화와 비슷한면이 있으며 
		Foreign키를 추가함으로써 Join을 줄이는 테크닉이다
		tag id와 tag 를 join한뒤에  author_id 값을 조회하고자 topic table까지 join하는 비효율성이 따르는데
		author_id를 tag id에 추가해줌으로써 topic table을 조회하는 비효율을 줄여준다
 
 






 
 
 
